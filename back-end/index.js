const express = require("express");
require("dotenv").config();
var history = require("connect-history-api-fallback");
const mysql = require("mysql");
const cors = require("cors");
var bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));

// parse application/json
app.use(bodyParser.json());
// const db = mysql.createConnection({
//   host: "34.205.83.88",
//   database: "zolo_analytics_metabase",
//   user: "analytics_admin",
//   password: "DpWBOfz871Sa"
// });
// const mysqlServer = `mysql://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@${process.env.DB_SERVER}`;

const db = mysql.createConnection({
  host: "34.205.83.88",
  user: "analytics_proto",
  password: "analytics_123",
  database: "Analytics_Prototype"
});

const db1 = mysql.createConnection({
  host: "34.205.83.88",
  user: "analytics_proto",
  password: "analytics_123",
  database: "Zolo_Centers"
});

const query = sqlStatement =>
  new Promise((resolve, reject) => {
    db.query(sqlStatement, (err, results) => {
      if (err) return reject(err);
      resolve(results);
    });
  });

const query1 = sqlStatement =>
  new Promise((resolve, reject) => {
    db1.query(sqlStatement, (err, results) => {
      if (err) return reject(err);
      resolve(results);
    });
  });

app.use(
  cors({
    origin: process.env.CORS_URL
  })
);

// Middleware for serving '/dist' directory
const staticFileMiddleware = express.static("dist");

// 1st call for unredirected requests
app.use(staticFileMiddleware);

// Support history api
app.use(
  history({
    index: "/dist/index.html"
  })
);

app.get("/", (req, res) => {
  res.send("Hello World");
});

const getDate = tableName => async (req, res) => {
  var meow = req.body.todo;
  var meoww = req.body.todo1;
  console.log("fetchDate", meow);
  console.log("fetchcity", meoww);
  const tableData1 = await query(
    `select * from ${tableName} where daily_date='${meow}' and userhotel='${meoww}'`
  );
  console.log("suthar", tableData1);
  res.json(tableData1);
};

// const getUserData = tableName => async (req, res) => {
//   const userData = await query(
//     `select DISTINCT CITY, LOCALNAME from ${tableName} where TYPE = "Kitchen"`
//   );
//   console.log(userData);
//   res.json(userData);
// };

const getUserData = tableName => async (req, res) => {
  const userData = await query1(
    `select DISTINCT CITY, LOCALNAME from ${tableName} where TYPE = "Property" AND Approved = 1`
  );
  console.log(userData)
  res.json(userData);
};

const getKitchen = tableName => async (req, res) => {
  assKitchen = req.body.propName;
  console.log("assKitchen", assKitchen);
  const kitName = await query(
    `select Associated_Kitchen_Name from ${tableName} where Property_Name='${assKitchen}'`
  );
  res.json(kitName);
};


const getDistinctDates = tableName => async (req, res) => {
  const tableData3 = await query(
    `select DISTINCT daily_date from ${tableName}`
  );
  res.json(tableData3);
};

/**
 * this mehtod uses the ID from the body of the request object to delete the record in the table
 * @param {string} tableName
 */
const deleteTableRow = tableName => async (req, res) => {
  console.log(req.body.id);
  const deletedRow = await query(
    `delete from ${tableName} where daily_date='${req.body.id}'`
  );
  res.json(deletedRow);
};
/**
 * this mehtod insertes a new table record filling the ID automatically meaning no need to send the ID with the request
 * @param {string} tableName
 */
const insertTableRow = tableName => async (req, res) => {
  //first value is always the ID which is auto generated by MySQL
  let sqlValuesStatment = "(NULL";
  for (let column in req.body) {
    sqlValuesStatment += `, '${req.body[column]}'`;
  }
  sqlValuesStatment += ")";
  // console.log(sqlValuesStatment);
  const insertedTableRow = await query(
    `insert into ${tableName} values ${sqlValuesStatment}`
  );
  res.json(insertedTableRow);
};

/**
 * this method creates the basic API template for a given table name using the name as route of the api
 * @param {string} tableName
 */

const createTableBasicAPI = tableName => {
  app.post(`/${tableName}/getkit`, getKitchen(`${tableName}`));
  app.post(`/${tableName}/date`, getDate(`${tableName}`));
  app.get(`/${tableName}/userdata`, getUserData(`${tableName}`));
  app.get(`/${tableName}/getdistinct`, getDistinctDates(`${tableName}`));
  app.post(`/${tableName}/insert`, insertTableRow(`${tableName}`));
  app.delete(`/${tableName}/delete`, deleteTableRow(`${tableName}`));
};

createTableBasicAPI("Kitchen_menu");
createTableBasicAPI("Centers");
createTableBasicAPI("Property_Kitchen_Map");

app.use(staticFileMiddleware);

const PORT = process.env.PORT || 4300;
app.listen(PORT);
